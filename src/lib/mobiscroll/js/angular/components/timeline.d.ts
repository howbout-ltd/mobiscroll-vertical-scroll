import { ElementRef, QueryList, TemplateRef } from '@angular/core';
import { MbscCalendarEvent, MbscNewEventData, MbscResource, MbscSlot } from '../../core/components/eventcalendar/eventcalendar';
import { IDailyEvents } from '../../core/components/eventcalendar/shared/schedule-timeline-base';
import { TimelineBase } from '../../core/components/eventcalendar/timeline/timeline';
import { DateType, ITimezonePlugin } from '../../core/util/datetime';
export declare class MbscTimeline extends TimelineBase {
    vScrollCont: ElementRef;
    vGridCont: ElementRef;
    vHeaderCont: ElementRef;
    vResCont: ElementRef;
    vMonthDays: QueryList<ElementRef>;
    vWeekDays: QueryList<ElementRef>;
    allDayText: string;
    clickToCreate: boolean | 'single' | 'double';
    colorsMap: {
        [key: number]: MbscCalendarEvent[];
    };
    dateFormat: string;
    dateFormatLong: string;
    dataTimezone: string;
    dayNames: string[];
    dayNamesMin: string[];
    dayNamesShort: string[];
    displayTimezone: string;
    dragTimeStep: number;
    dragToCreate: boolean;
    dragToMove: boolean;
    dragToResize: boolean;
    endDay: number;
    endTime: string;
    eventMap: {
        [key: number]: MbscCalendarEvent[];
    };
    eventContentTemplate: TemplateRef<any>;
    eventOrder: (event1: MbscCalendarEvent, event2: MbscCalendarEvent) => number;
    eventTemplate: TemplateRef<any>;
    exclusiveEndDates: boolean;
    extendDefaultEvent: (args: MbscNewEventData) => MbscCalendarEvent;
    externalDrop: boolean;
    eventList: boolean;
    firstDay: number;
    getDay: (d: Date) => number;
    getDate: (y: number, m: number, d: number, h?: number, i?: number, s?: number, u?: number) => number;
    getMonth: (d: Date) => number;
    getYear: (d: Date) => number;
    groupBy: 'date' | 'resource';
    height: number;
    invalidateEvent: 'start-end' | 'strict';
    invalidsMap: {
        [key: number]: MbscCalendarEvent[];
    };
    maxDate: number;
    minDate: number;
    monthNames: string[];
    monthNamesShort: string[];
    newEventText: string;
    nextIcon: string;
    nextIconRtl: string;
    downIcon: string;
    refDate: DateType;
    resources: MbscResource[] | null | undefined;
    resourceHeaderTemplate: TemplateRef<any>;
    resourceTemplate: TemplateRef<any>;
    rowHeight: 'variable' | 'equal';
    scroll: number;
    selected: number;
    showAllDay: boolean;
    showDays: boolean;
    showEventTooltip: boolean;
    size: number;
    slots: MbscSlot[] | null | undefined;
    slotTemplate: TemplateRef<any>;
    startDay: number;
    startTime: string;
    timeCellStep: number;
    timeFormat: string;
    timeLabelStep: number;
    timezonePlugin: ITimezonePlugin;
    type: 'week' | 'day' | 'month';
    width: number;
    onCellClick: (args: any) => void;
    onCellDoubleClick: (args: any) => void;
    onCellRightClick: (args: any) => void;
    onEventClick: (args: any) => void;
    onEventDoubleClick: (args: any) => void;
    onEventRightClick: (args: any) => void;
    onEventHoverIn: (args: any) => void;
    onEventHoverOut: (args: any) => void;
    onEventDelete: (args: any) => void;
    onEventDragEnd: (args: any) => void;
    onWeekDayClick: (args: any) => void;
    _getCellDate(timestamp: number, ms: number): Date;
    _getDayKey(index: number, day: any): number;
    _getEventKey(index: number, data: any): any;
    _getDragKey(dayEvents: IDailyEvents, slotId: string | number): string;
    protected _mounted(): void;
    private _fillMonthDays;
    private _fillWeekDays;
}
