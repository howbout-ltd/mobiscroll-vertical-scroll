import { ElementRef, TemplateRef } from '@angular/core';
import { MbscResource } from '../../core/components/eventcalendar/eventcalendar';
import { CalendarViewBase, MbscCalendarLabel, ViewType } from '../../core/shared/calendar-view/calendar-view';
import { InstanceServiceBase } from '../../core/shared/instance-service';
import { DateType, ITimezonePlugin } from '../../core/util/datetime';
import { noop } from '../../core/util/misc';
/** @hidden */
export declare class MbscCalendarView extends CalendarViewBase {
    vBody: ElementRef;
    vPickerCont: ElementRef;
    activeDate: number;
    cssClass: string;
    clickToCreate: boolean | 'double' | 'single';
    colors: {};
    dataTimezone: string;
    dayTemplate: TemplateRef<any>;
    dayContentTemplate: TemplateRef<any>;
    displayTimezone: string;
    dragToCreate: boolean;
    dragToResize: boolean;
    dragToMove: boolean;
    endDay: number;
    eventOrder: (event1: MbscCalendarLabel, event2: MbscCalendarLabel) => number;
    eventRange: 'year' | 'month' | 'week' | 'day';
    eventRangeSize: number;
    exclusiveEndDates: boolean;
    hasContent: boolean;
    hasPicker: boolean;
    headerTemplate: TemplateRef<any>;
    height: number | string;
    hoverEnd: number;
    hoverStart: number;
    invalid: {};
    instanceService: InstanceServiceBase;
    isPicker: boolean;
    labels: {};
    labelTemplate: TemplateRef<any>;
    labelContentTemplate: TemplateRef<any>;
    dragData?: {
        [key: number]: any[];
    };
    max: DateType;
    marked: {};
    min: DateType;
    mouseSwipe: boolean;
    mousewheel: boolean;
    noOuterChange: boolean;
    downIcon: string;
    nextIconH: string;
    nextIconV: string;
    prevIconH: string;
    prevIconV: string;
    upIcon: string;
    pages: number | 'auto';
    pageLoad: number;
    refDate: DateType;
    resourcesMap?: {
        [key: number]: MbscResource;
    };
    rangeEnd: number;
    rangeStart: number;
    responsiveStyle: boolean;
    selectedDates: any;
    selectView?: ViewType;
    showCalendar: boolean;
    showControls: boolean;
    showEventTooltip: boolean;
    showLabelCount: boolean;
    showOuterDays: boolean;
    showSchedule: boolean;
    showToday: boolean;
    showWeekNumbers: boolean;
    size: number;
    startDay: number;
    swipe: boolean;
    timeFormat: string;
    timezonePlugin: ITimezonePlugin;
    update: number;
    valid: {};
    weeks: number;
    width: number | string;
    calendarScroll: 'horizontal' | 'vertical';
    calendarType: 'year' | 'month' | 'week';
    getDate: (y: number, m: number, d: number) => Date;
    getDay: (d: Date) => number;
    getMaxDayOfMonth: (y: number, m: number) => number;
    getMonth: (d: Date) => number;
    getWeekNumber: (d: Date) => number;
    getYear: (d: Date) => number;
    dateFormat: string;
    dayNames: string[];
    dayNamesMin: string[];
    dayNamesShort: string[];
    eventText: string;
    eventsText: string;
    firstDay: number;
    monthNames: string[];
    monthNamesShort: string[];
    moreEventsPluralText: string;
    moreEventsText: string;
    todayText: string;
    yearSuffix: string;
    onActiveChange: (args: any) => void;
    onCellHoverIn: (args: any) => void;
    onCellHoverOut: (args: any) => void;
    onDayClick: (args: any) => void;
    onDayDoubleClick: (args: any) => void;
    onDayRightClick: (args: any) => void;
    onDayHoverIn: (args: any) => void;
    onDayHoverOut: (args: any) => void;
    onGestureStart: (args: any) => void;
    onLabelClick: (args: any) => void;
    onLabelDoubleClick: (args: any) => void;
    onLabelRightClick: (args: any) => void;
    onLabelHoverIn: (args: any) => void;
    onLabelHoverOut: (args: any) => void;
    onLabelDelete: (args: any) => void;
    onLabelUpdateStart: (args: any) => void;
    onLabelUpdateMove: (args: any) => void;
    onLabelUpdateEnd: (args: any) => void;
    onLabelUpdateModeOn: (args: any) => void;
    onLabelUpdateModeOff: (args: any) => void;
    onPageChange: (args: any) => void;
    onPageLoaded: (args: any) => void;
    onPageLoading: (args: any) => void;
    onResize: (args: any) => void;
    onTodayClick: () => void;
    _noop: typeof noop;
    protected _mounted(): void;
    protected _updated(): void;
}
